#import "config.typ": *
#import "@preview/fletcher:0.4.3" as fletcher: diagram, node, edge
#show: dtt.with(title: "Limits")

= Introduction

The goal of this chapter is to revisit the structures defined in #cross-link("struct-1")[Structures I] with an eye on generalization.

= Structures, revisited

We start the section by a reflection on the definition of #cross-link("struct-1", reference: <def_unit>)[having a unit type].
For a type theory to have a unit type, the following needs to be true:

For every context $Î“$,
+ there is a type $Î“ âŠ¢ top$,
+ there is a distinguished term $Î“ âŠ¢ â˜… : top$
  such that every term of this type is equal to it,
+ and this whole thing is preserved by substitution.

For product types, we can rephrase its definition in a similar way,
but with the presence of rule premises, they are more complicated:

For every context $Î“$ and types $Î“ âŠ¢ A$ and $Î“ âŠ¢ B$,
+ there is a type $Î“ âŠ¢ A Ã— B$,
+ for every pair of terms $Î“ âŠ¢ t : A$ and $Î“ âŠ¢ u : B$, there is a term $Î“ âŠ¢ âŸ¨t, uâŸ© : A Ã— B$
  such that every term of this type can be written as such a
  pair,
+ and this whole thing is preserved by substitution.

Note that the fact that all terms can be written as such a pair is known as all terms _factor through_ the introduction rule.
Similarly for the empty type, all terms in contexts where $mybot$ is present _factor through_ the elimination rule.

There seems to be a lot of things in common:

For every context $Î“$ and types $Î“ âŠ¢ ðŸ¤”$,
+ there is a type $Î“ âŠ¢ âœ¨$,
+ for every tuple of terms $Î“ âŠ¢ ... : ðŸ¤”$, there is a term $Î“ âŠ¢ ... : âœ¨$
  such that every term of this type factor through its introduction,
+ and this whole thing is preserved by substitution.

Now, the real question arise: can we generalize this?
